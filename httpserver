#!/usr/bin/env python3

import argparse, zlib, os
from http.server import HTTPServer, BaseHTTPRequestHandler
import requests
import utils


''' Constant set of fields to use in HTTP requests '''
ORIGIN_PORT: int = 8080
CONTENT_TYPE_HEADER: str = 'Content-type'
CONTENT_LENGTH_HEADER: str = 'Content-length'
CONTENT_TYPE: str = 'text/html'

''' Set the default CDN port and Origin hostname '''
global http_port
global origin_hostname
http_port: int = 8080
origin_hostname: str = 'cs5700cdnorigin.ccs.neu.edu'

class CacheManager:
    '''
       Helper class responsible for loading the cached information in the server's local directory to a dictionary 
       for fast response lookups to improve response times.
    '''
    def __init__(self):
        # Instantiate the cache dictionary to be used to provide cached responses to the client
        self.CACHE = self.load_cache()
    
    def load_cache(self) -> dict[str, bytes]:
        '''
            Function: load_cache() - this method is responsible for loading the compressed cached data from the server's local directory 
                to a Python dictionary for faster lookups to improve response time for the client.
            Parameters: none
            Returns: a dictionary/map of compressed responses corresponding to the most popular wiki queries
        '''
        # Initialize the cache dictionary
        cache_dict: dict[str, bytes] = {}
        # Locate the local cache directory
        local_cache = os.getcwd() + '/cache'

        # Iterate through the cached wiki queries
        for cached_page in os.listdir(local_cache):
            # Open the query response file and read the compressed HTML response
            file = open(os.path.join(local_cache, cached_page), 'rb')
            # Map the wiki query to it corresponding response
            cache_dict[cached_page] = file.read()
            # Remove the query response from the local directory to prevent memory overflow
            os.remove(os.path.join(local_cache, cached_page))

        # Remove the local cache directory from the server (clean up)
        # Cached responses now in the dictionary
        os.rmdir(local_cache)

        return cache_dict

class CDNHTTPRequestHandler(BaseHTTPRequestHandler):
    '''
        Helper class responsible for handling HTTP requests to the CDN server and managing responses to the client based on their query paths and,
        whether their response is retrieved from the cache or the origin server.
    '''
    # Initialize the CacheManager
    global cm, session
    cm = CacheManager()
    # Setup a client session with the origin server
    session = requests.Session()

    def do_GET(self) -> None:
        '''
            Function: do_GET() - this method is responsible for the GET request management of the HTTP server. The method also manages cache vs. origin server response and error and special HTTP response code handling. It provides the following function:
                1. IF (query_path = "/grading/beacon")  [Special Case]
                    reply with HTTP code - 204 (empty response)
                
                2. IF (query_path is NOT VALID)
                    reply with error response - 400 (bad request)
                3. ELSE (query_path is VALID)
                    I. IF (query_path in CACHE)
                        reply with the cached response reducing response time - 200
                    II. ELSE (query_path NOT in CACHE)
                        a. retrieve response from the Origin Server by sending a GET request
                        b. parse the response and the corresponding code
                        c. send appropriate response back to the client
            Parameters: none
            Returns: none
        '''
        try:
            # Handle the specified path url for the server
            if (self.path == '/grading/beacon'):
                # Build the HTTP response headers
                self.send_response(204)
                self.send_header(CONTENT_TYPE_HEADER, CONTENT_TYPE)
                self.end_headers()

                # Send response to the client
                self.wfile.write('204: NO CONTENT'.encode())
            
            # Parse and validate the client's request url path
            else:              
                # Invalid path
                if (len(self.path.split('/')) > 2):
                    # Respond the client with an invalid path error
                    self.send_error(400, '400: BAD REQUEST')    # Bad Request
                
                # Path is valid
                else:
                    # Parse the client's search query
                    # e.g., valid path: /Canada -(split)-> ['', 'Canada']
                    query = self.path.split('/')[-1]

                    # Check whether client's search query is in the cache
                    # IF yes, send the cached response thereby improving response time
                    if query in cm.CACHE.keys():
                        # Extract the cached response
                        cached_response = cm.CACHE.get(query)   # Compressed response
                        # Decompress the cached response
                        response = zlib.decompress(cached_response)    #type:ignore

                        # Build the HTTP response headers
                        self.send_response(200)
                        self.send_header(CONTENT_TYPE_HEADER, CONTENT_TYPE)
                        self.send_header(CONTENT_LENGTH_HEADER, str(len(response)))
                        self.end_headers()

                        # Send the cached response to the client
                        self.wfile.write(response)

                    # Search query NOT in cache
                    # Retrieve response from the Origin server
                    else:
                        # Build the origin server GET request url
                        origin_request_url = utils.build_request_URL(origin_hostname, ORIGIN_PORT, query)
                        # Send GET request to the origin server and receive response
                        response = session.get(origin_request_url)
                        
                        # Response code: OK
                        if (response.status_code in range(200, 299 + 1)):
                            # Decode the origin server response
                            origin_response = response.content

                            # Build the HTTP response headers
                            self.send_response(200)
                            self.send_header(CONTENT_TYPE_HEADER, CONTENT_TYPE)
                            self.send_header(CONTENT_LENGTH_HEADER, str(len(origin_response)))
                            self.end_headers()

                            # Send the origin response to the client
                            self.wfile.write(origin_response)
                        
                        else:
                            # Respond the client with an 404 Not found code
                            self.send_error(404, '404: NOT FOUND')    # Not found

        # Handle HTTP request exceptions
        except requests.exceptions.RequestException as error:
            session.close()     # Close client session
            raise(error)

def start_CDN_server() -> None:
    '''
        Function: start_CDN_server() - this method is responsible for firstly, retrieving the CDN IP address, and
            starting the server on that IP address and the CDN server port number. Lastly, the server is started and
            is controlled by the [deploy|run|stop]CDN scripts.
        Parameters: none
        Returns: none
    '''
    # Extract the CDN host IP address
    cdn_IP = utils.get_my_ip()
    # Instantiate the HTTP server, with the CDN IP address and port number and the HTTP request handler class managing the GET requests
    http_server = HTTPServer((cdn_IP, http_port), CDNHTTPRequestHandler)
    # Start the HTTP server
    http_server.serve_forever()


if __name__ == "__main__":
    ''' Script argument parser '''
    parser = argparse.ArgumentParser(description='HTTP Server')

    # Store HTTP port no. and Origin server hostname from terminal
    parser.add_argument('-p', dest='http_port', type=int, action='store', required=True, help='<CDN Server Port>')
    parser.add_argument('-o', dest='origin_hostname', type=str, action='store', required=True, help='<Origin Hostname>')
    args = parser.parse_args()

    # Extract the input HTTP port and Origin Server hostname
    http_port = args.http_port
    origin_hostname = args.origin_hostname
    
    # Start the CDN HTTP Server
    start_CDN_server()
